import numpy
import pylab

def dumb(f):
  return f * numpy.pi

def pade(f):
  return f * -0.90585 / (-0.28833 + f * f)

def poly3taylor(f):
  fsq = f * f
  r = 0.3333333 * numpy.pi ** 3
  r *= fsq
  r += numpy.pi
  r *= f
  return r

def poly3gradient(f, a=3.736e-01):
  fsq = f * f
  r = a * numpy.pi ** 3
  r *= fsq
  r += numpy.pi
  r *= f
  return r


def poly5mdsp(f, a=3.1755e-01, b=2.033e-01):
  fsq = f * f
  r = b * numpy.pi ** 5
  r *= fsq
  r += a * numpy.pi ** 3
  r *= fsq
  r += numpy.pi
  r *= f
  return r


def poly5gradient(f, a=3.260e-01, b=1.823e-01):
  f = f * numpy.pi
  fsq = f * f
  r = b
  r *= fsq
  r += a
  r *= fsq
  r += 1.0
  r *= f
  return r


def poly11mdsp(f):
  fsq = f * f
  r = 9.5168091e-03 * numpy.pi ** 11
  r *= fsq
  r += 2.900525e-03 * numpy.pi ** 9
  r *= fsq
  r += 5.33740603e-02 * numpy.pi **7
  r *= fsq
  r += 1.333923995e-01 * numpy.pi **5
  r *= fsq
  r += 3.333314036e-01 * numpy.pi **3
  r *= fsq
  r += numpy.pi
  r *= f
  return r


def compute_filter_settings(cutoff, resonance):
  g = numpy.tan(numpy.pi * cutoff) + resonance * 0
  r = 1.0 / resonance + cutoff * 0
  h = 1 / (1 + r * g + g * g)
  return g, r, h


